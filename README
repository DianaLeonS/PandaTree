<< Introduction >>

PandaTree contains the panda data format and the tools to create and extend the C++ library for the
format. The written format is fully flat (simple C types and arrays only) and is as "dumb" as it
gets, which means that it is slim, fast to read/write, and fully portable (no library is needed read
the files). The library defines the interface which constructs C++ objects from this flat tree so
that the analyis programs don't have to be dumb.

Tree structures are defined in tree definition files and then converted to C++ code by generate.py.
Usage is
generate.py panda.def [additional definition files]
The script will write C++ source code into Objects/ and obj/ directories.

<< Definition file syntax >>

Tree definition file is made of various sections and blocks. A comment line starts with a '%' character.
All typedefs, enums, constants, and classes will be defined under a namespace whose name is taken from the
name of the definition file (e.g. simpletree.def --> namespace simpletree).

1. Includes
Define all headers to be included in the object definition headers.

2. Typedefs
Similarly, define all typedefs.

3. Constants
Constants defined in this section can be used in the object definitions.

4. Asserts
Assertions to be made at compile-time. This can be used to assure that the constants satisfy certain conditions.

5. Enums
C++ enums. An entry of name n{NAME}s will be automatically appended, where {NAME} is the name of the enum.

6. Objects
This section is the core of the definition file. Each object definition is started with a line

[Obj(<-Parent):SPEC]

where Obj is the name of the class, Parent is its base class, and SPEC is either

 . "MAX=n" (n integer) -> define a dynamic collectable object. A class ObjCollection will be automatically created. The collection class behaves like std::vector but has a maximum size of n. 
 . "SIZE=n" (n integer) -> define a static collectable object. A class ObjCollection will be automatically created. The collection class behaves like a C array of Objs with array size n.
 . "SINGLE" -> define a non-collectable object (e.g. MET).

Everything that follows after the object name until the next blank line is parsed as the definition
of the object. Within this block, object variables (i.e. ROOT branches), references (pointers to
other objects), constants, and functions can be defined. Variables are defined by syntax

name([array_spec])/type

where array_spec can be multi-dimensional and can use either integer literals or the constants
defined in the constants section.

Branch types follow the ROOT convention:
 O -> Bool_t (capital o)
 b -> UChar_t
 B -> Chart_t
 s -> UShort_t
 S -> Short_t
 i -> UInt_t
 I -> Int_t
 l -> ULong64_t
 L -> Long64_t
 F -> Float_t
 D -> Double_t
 C -> Chart_t*

References are defined by syntax

name/class*

In the ROOT file, they are represented by unsigned integers which correspond to the index of the
object that is pointed to within its owning collection. Thus one has to specify element of which
collection this reference points to, and this is done in the Tree definition (see below).

7. Trees

Tree names are specified by {Name}. Everything that follows a tree declaration until the next blank
line is considered as tree definition.

Syntax for tree blocks are identical to that for object blocks.

<< Tree input/output >>

Each object variable is booked an independent TBranch. The objects know how to write out and read in
the branch values from TTree. Collections use variable names in the tree definition to book branches.
For example, consider a file particles.def with the following content:
===========================
[Particle:MAX=10]
pt/F
eta/F
phi/F

{Event}
myparts/ParticleCollection
===========================

generate.py particles.def
will result in the following TTree structure:
tree (name not fixed)
 L myparts.size/i
 L myparts.pt[myparts.size]/F
 L myparts.eta[myparts.size]/F
 L myparts.phi[myparts.size]/F

<< Analysis code >>

generate.py <conf>.def

will produce multiple files under Objects and obj. In the analysis code,
it suffices to include only

#include "PandaTree/Objects/interface/Event.h"
#include "PandaTree/Objects/interface/Run.h"

as all relevant headers are included in these files.

Using the example above, one can fill the tree by

  TTree* tree = new TTree("mytree", "My Tree");
  panda::Event event;
  event.book(*tree); // creates branches

  ...
  for each event
    for (auto&& inPart : inParticles) {
      panda::Particles& outPart(event.myparts.create_back()); // create one particle at the end - throws if maximum size has been reached
  
      outPart.pt = inPart.pt();
      outPart.eta = inPart.eta();
      outPart.phi = inPart.phi();
    }
  
    tree->Fill();

or process the tree written above like

  TTree* tree = static_cast<TTree*>(inputFile->Get("mytree"));
  panda::Event event;
  event.setAddress(*tree);

  long iEntry = 0;
  while (tree->GetEntry(iEntry++) > 0) {
    histogram1->Fill(event.particles.size());
    for (auto& part : event.particles) {
      histogram2->Fill(part.pt);
    }
  }

<< Inheritance >>

When a collectable object class is declared as derived from another class, both the element and the
collection have inheritance relations. For example, if

[Particle:SIZE=10]
pt/F
eta/F
phi/F

[ParticleM:Particle]
mass/F

then in the resulting C++ code, ParticleM is a subclass of Particle, and ParticleMCollection is a
subclass of ParticleCollection. This is in contrast to e.g. having a std::vector of inheriting classes;
std::vector<ParticleM> and std::vector<Particle> are not related.

These inheritance relations can be used effectively to make the analysis code compact.

<< Speeding up I/O >>

It is possible to specify which branches to read and write. By limiting I/O to only the branches you
actually use, it is possible to significantly speed up the analysis program. To use this feature,
pass a list of branch names to setAddress():

event.setStatus(*tree, false, {"*"});
event.setAddress(*tree, {"particle.pt", "particle.eta"});

In this example, the first line turns off all branches, but the branches particle.pt and
particle.eta are turned back on for reading. Particle objects in the event will have all other
attributes except for pt and eta set to 0.

The same effect can be achieved by

event.setAddress(*tree, {"!*", "particle.pt", "particle.eta"});

The ! sign excludes the matching branches. Branch name matchin is evaluated in sequence, and the
last matching name determines whether the branch is turned on or off. Similar mechanism exists for
booking branches; in this case branches that are turned off are not written to the output file.
